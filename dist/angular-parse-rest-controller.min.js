!function(e){e.module("parse.restController",[])}(angular),function(e){function t(e){Parse.CoreManager.setRESTController(e)}e.module("parse.restController").run(t),t.$inject=["rest"]}(angular),function(e){function t(t,r){var n=this,s=Parse.CoreManager,a=Parse.Promise,o=Parse.Error;this.ajax=function(n,o,i,u){function l(){t(d).then(function(t){e.isObject(t.data)?c.resolve(t.data,t.status):c.reject("Response is not a valid JSON")},function(t){if(t.status>=500||0===t.status)if(f+=1,f<s.get("REQUEST_ATTEMPT_LIMIT")){var n=Math.round(125*Math.random()*Math.pow(2,f));r(l,n)}else 0===t.status?c.reject("Unable to connect to the Parse API"):c.reject({status:t.status,responseText:JSON.stringify(t.data||{})});else e.isObject(t.data)?c.reject({status:t.status,responseText:JSON.stringify(t.data)}):c.reject({status:t.status,responseText:t.data})})}u=u||{},u.Accept=void 0,u["Content-Type"]=void 0;var c=new a,f=0,d={method:n,url:o,data:i,headers:u};return l(),c},this.request=function(e,t,r,i){var u=s.get("SERVER_URL");"/"!==u[u.length-1]&&(u+="/"),u+=t;var l={};if(r&&"object"==typeof r)for(var c in r)l[c]=r[c];"POST"!==e&&(l._method=e,e="POST"),l._ApplicationId=s.get("APPLICATION_ID");var f=s.get("JAVASCRIPT_KEY");f&&(l._JavaScriptKey=f),l._ClientVersion=s.get("VERSION");var d=i.useMasterKey;if("undefined"==typeof d&&(d=s.get("USE_MASTER_KEY")),d){if(!s.get("MASTER_KEY"))throw new Error("Cannot use the Master Key, it has not been provided.");delete l._JavaScriptKey,l._MasterKey=s.get("MASTER_KEY")}s.get("FORCE_REVOCABLE_SESSION")&&(l._RevocableSession="1");var S,p=i.installationId;if(p&&"string"==typeof p)S=a.as(p);else{var v=s.getInstallationController();S=v.currentInstallationId()}return S.then(function(e){l._InstallationId=e;var t=s.getUserController();return i&&"string"==typeof i.sessionToken?a.as(i.sessionToken):t?t.currentUserAsync().then(function(e){return e?a.as(e.getSessionToken()):a.as(null)}):a.as(null)}).then(function(t){t&&(l._SessionToken=t);var r=JSON.stringify(l);return n.ajax(e,u,r)}).fail(function(e){var t;if(e&&e.responseText)try{var r=JSON.parse(e.responseText);t=new o(r.code,r.error)}catch(n){t=new o(o.INVALID_JSON,"Received an error with invalid JSON from Parse: "+e.responseText)}else t=new o(o.CONNECTION_FAILED,"XMLHttpRequest failed: "+JSON.stringify(e));return a.error(t)})}}e.module("parse.restController").service("rest",t),t.$inject=["$http","$timeout"]}(angular);