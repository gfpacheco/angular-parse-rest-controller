!function(e){e.module("parse.restController",[])}(angular),function(e){function t(e){Parse.CoreManager.setRESTController(e)}e.module("parse.restController").run(t),t.$inject=["rest"]}(angular),function(e){function t(t,r){var n=this,s=Parse.CoreManager,a=Parse.Promise,o=Parse.Error;this.ajax=function(n,o,i,u){function l(){t(f).then(function(t){e.isObject(t.data)?c.resolve(t.data,t.status):c.reject("Response is not a valid JSON")},function(t){if(t.status>=500||0===t.status)if(d+=1,d<s.get("REQUEST_ATTEMPT_LIMIT")){var n=Math.round(125*Math.random()*Math.pow(2,d));r(l,n)}else 0===t.status?c.reject("Unable to connect to the Parse API"):c.reject({status:t.status,responseText:e.toJson(t.data||{})});else e.isObject(t.data)?c.reject({status:t.status,responseText:e.toJson(t.data)}):c.reject({status:t.status,responseText:t.data})})}u=u||{},u.Accept=void 0,u["Content-Type"]=void 0;var c=new a,d=0,f={method:n,url:o,data:i,headers:u};return l(),c},this.request=function(t,r,i,u){var l=s.get("SERVER_URL");"/"!==l[l.length-1]&&(l+="/"),l+=r;var c={};if(i&&"object"==typeof i)for(var d in i)c[d]=i[d];"POST"!==t&&(c._method=t,t="POST"),c._ApplicationId=s.get("APPLICATION_ID");var f=s.get("JAVASCRIPT_KEY");f&&(c._JavaScriptKey=f),c._ClientVersion=s.get("VERSION");var p=u.useMasterKey;if("undefined"==typeof p&&(p=s.get("USE_MASTER_KEY")),p){if(!s.get("MASTER_KEY"))throw new Error("Cannot use the Master Key, it has not been provided.");delete c._JavaScriptKey,c._MasterKey=s.get("MASTER_KEY")}s.get("FORCE_REVOCABLE_SESSION")&&(c._RevocableSession="1");var v,T=u.installationId;if(T&&"string"==typeof T)v=a.as(T);else{var E=s.getInstallationController();v=E.currentInstallationId()}return v.then(function(e){c._InstallationId=e;var t=s.getUserController();return u&&"string"==typeof u.sessionToken?a.as(u.sessionToken):t?t.currentUserAsync().then(function(e){return e?a.as(e.getSessionToken()):a.as(null)}):a.as(null)}).then(function(r){r&&(c._SessionToken=r);var s=e.toJson(c);return n.ajax(t,l,s)}).fail(function(t){var r;if(t&&t.responseText)try{var n=JSON.parse(t.responseText);r=new o(n.code,n.error)}catch(s){r=new o(o.INVALID_JSON,"Received an error with invalid JSON from Parse: "+t.responseText)}else r=new o(o.CONNECTION_FAILED,"XMLHttpRequest failed: "+e.toJson(t));return a.error(r)})}}e.module("parse.restController").service("rest",t),t.$inject=["$http","$timeout"]}(angular);